// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Model.Database;

#nullable disable

namespace DAL
{
    public partial class DbService : DbContext
    {
        public DbService()
        {
        }

        public DbService(DbContextOptions<DbService> options)
            : base(options)
        {
        }

        public virtual DbSet<DlvDeliverDetail> DlvDeliverDetail { get; set; }
        public virtual DbSet<DlvDeliverTrack> DlvDeliverTrack { get; set; }
        public virtual DbSet<DlvDeliverTrackDetail> DlvDeliverTrackDetail { get; set; }
        public virtual DbSet<DlvException> DlvException { get; set; }
        public virtual DbSet<DlvUser> DlvUser { get; set; }
        public virtual DbSet<HisCompanySupplier> HisCompanySupplier { get; set; }
        public virtual DbSet<RCompanySupplier> RCompanySupplier { get; set; }
        public virtual DbSet<ROrderproductDeliver> ROrderproductDeliver { get; set; }
        public virtual DbSet<ROrderproductSupplier> ROrderproductSupplier { get; set; }
        public virtual DbSet<RProductSuplier> RProductSuplier { get; set; }
        public virtual DbSet<SpException> SpException { get; set; }
        public virtual DbSet<SpUser> SpUser { get; set; }
        public virtual DbSet<TCart> TCart { get; set; }
        public virtual DbSet<TCategory> TCategory { get; set; }
        public virtual DbSet<TComment> TComment { get; set; }
        public virtual DbSet<TCompany> TCompany { get; set; }
        public virtual DbSet<TCoupon> TCoupon { get; set; }
        public virtual DbSet<TFeedback> TFeedback { get; set; }
        public virtual DbSet<TMessage> TMessage { get; set; }
        public virtual DbSet<TOrder> TOrder { get; set; }
        public virtual DbSet<TOrderCallback> TOrderCallback { get; set; }
        public virtual DbSet<TOrderCoupon> TOrderCoupon { get; set; }
        public virtual DbSet<TOrderProduct> TOrderProduct { get; set; }
        public virtual DbSet<TPay> TPay { get; set; }
        public virtual DbSet<TProduct> TProduct { get; set; }
        public virtual DbSet<TProductCompany> TProductCompany { get; set; }
        public virtual DbSet<TUser> TUser { get; set; }
        public virtual DbSet<TUserCoupon> TUserCoupon { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasCharSet("utf8mb4")
                .UseCollation("utf8mb4_0900_ai_ci");

            modelBuilder.Entity<DlvDeliverDetail>(entity =>
            {
                entity.HasKey(e => new { e.Crdate, e.Deliverid, e.Supplierid, e.Productid })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.HasComment("送货员送货详情");

                entity.Property(e => e.Crdate).HasComment("日期");

                entity.Property(e => e.Deliverid).HasComment("送货人id");

                entity.Property(e => e.Supplierid).HasComment("供货商id");

                entity.Property(e => e.Productid).HasComment("商品id");

                entity.Property(e => e.ProductCount).HasComment("商品数量");
            });

            modelBuilder.Entity<DlvDeliverTrack>(entity =>
            {
                entity.HasComment("送货员送货情况追踪");

                entity.Property(e => e.Id).HasComment("送货追踪id");

                entity.Property(e => e.Crdate).HasComment("详细日期");

                entity.Property(e => e.Crtime).HasComment("详细时间");

                entity.Property(e => e.Deliverid).HasComment("送货员id");
            });

            modelBuilder.Entity<DlvDeliverTrackDetail>(entity =>
            {
                entity.HasKey(e => e.Trackid)
                    .HasName("PRIMARY");

                entity.HasComment("送货行为追踪");

                entity.Property(e => e.Trackid)
                    .ValueGeneratedNever()
                    .HasComment("送货追踪id");

                entity.Property(e => e.Companyid).HasComment("送达公司id");

                entity.Property(e => e.Crtime).HasComment("时间");

                entity.Property(e => e.State).HasComment("状态 1到达取货地点 2离开取货地点 3到达送货地点");

                entity.Property(e => e.Supplierid).HasComment("供货商id");
            });

            modelBuilder.Entity<DlvException>(entity =>
            {
                entity.HasKey(e => new { e.Crdate, e.Delivererid })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("送货人送货异常情况");

                entity.Property(e => e.Crdate).HasComment("日期");

                entity.Property(e => e.Delivererid).HasComment("送货人id");

                entity.Property(e => e.LossValue).HasComment("损失评论（元）");

                entity.Property(e => e.Msg).HasComment("异常描述");

                entity.Property(e => e.ProductCount).HasComment("受影响的商品数量");

                entity.Property(e => e.State).HasComment("状态 0未处理 1已处理");

                entity.HasOne(d => d.Deliverer)
                    .WithMany(p => p.DlvException)
                    .HasForeignKey(d => d.Delivererid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_delivererid");
            });

            modelBuilder.Entity<DlvUser>(entity =>
            {
                entity.HasComment("配送人信息");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Address).HasComment("送货人地址");

                entity.Property(e => e.Crtime).HasComment("创建时间");

                entity.Property(e => e.Name).HasComment("送货人名称");

                entity.Property(e => e.State).HasComment("状态 0正常 1禁用");
            });

            modelBuilder.Entity<HisCompanySupplier>(entity =>
            {
                entity.HasKey(e => new { e.Crdate, e.Companyid })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("公司的主供货商历史记录");

                entity.Property(e => e.Crdate).HasComment("日期");

                entity.Property(e => e.Companyid).HasComment("公司id");

                entity.Property(e => e.Suplierid).HasComment("供货商id");
            });

            modelBuilder.Entity<RCompanySupplier>(entity =>
            {
                entity.HasKey(e => new { e.Companyid, e.StartDate })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("公司与供货商关系");

                entity.Property(e => e.Companyid).HasComment("公司id");

                entity.Property(e => e.StartDate).HasComment("起始日期");

                entity.Property(e => e.EndDate).HasComment("结束日期");

                entity.Property(e => e.Suplierid).HasComment("供货商id");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.RCompanySupplier)
                    .HasForeignKey(d => d.Companyid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_companyid");

                entity.HasOne(d => d.Suplier)
                    .WithMany(p => p.RCompanySupplier)
                    .HasForeignKey(d => d.Suplierid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_suplierid_2");
            });

            modelBuilder.Entity<ROrderproductDeliver>(entity =>
            {
                entity.HasKey(e => new { e.Orderid, e.Productid })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("订单中的商品的送货人");

                entity.Property(e => e.Orderid).HasComment("订单号");

                entity.Property(e => e.Productid).HasComment("商品id");

                entity.Property(e => e.Delivererid).HasComment("送货人");

                entity.Property(e => e.Msg).HasComment("说明");

                entity.Property(e => e.State).HasComment("状态 0正常 1未送达");
            });

            modelBuilder.Entity<ROrderproductSupplier>(entity =>
            {
                entity.HasKey(e => new { e.Orderid, e.Productid })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("订单中的商品的供货商");

                entity.Property(e => e.Orderid).HasComment("订单号");

                entity.Property(e => e.Productid).HasComment("商品id");

                entity.Property(e => e.Msg).HasComment("说明");

                entity.Property(e => e.State).HasComment("状态 0正常 1未出货");

                entity.Property(e => e.Supplierid).HasComment("供货商");
            });

            modelBuilder.Entity<RProductSuplier>(entity =>
            {
                entity.HasKey(e => new { e.Productid, e.Suplierid, e.Type, e.StartDate })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                entity.HasComment("部分商品的指定供货商");

                entity.Property(e => e.Productid).HasComment("商品id");

                entity.Property(e => e.Suplierid).HasComment("供货商id");

                entity.Property(e => e.Type).HasComment("类型 0由其供货 1不由其供货");

                entity.Property(e => e.StartDate).HasComment("开始日期");

                entity.Property(e => e.Crtime).HasComment("创建时间");

                entity.Property(e => e.EndDate).HasComment("结束日期");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RProductSuplier)
                    .HasForeignKey(d => d.Productid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_productid");

                entity.HasOne(d => d.Suplier)
                    .WithMany(p => p.RProductSuplier)
                    .HasForeignKey(d => d.Suplierid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_suplierid");
            });

            modelBuilder.Entity<SpException>(entity =>
            {
                entity.HasComment("供货商供货异常情况");

                entity.Property(e => e.Id).HasComment("异常id");

                entity.Property(e => e.Crdate).HasComment("日期");

                entity.Property(e => e.LossValue).HasComment("损失评论（元）");

                entity.Property(e => e.Msg).HasComment("异常描述");

                entity.Property(e => e.ProductCount).HasComment("受影响的商品数量");

                entity.Property(e => e.State).HasComment("状态 0未处理 1已处理");

                entity.Property(e => e.Supplierid).HasComment("供货商id");

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.SpException)
                    .HasForeignKey(d => d.Supplierid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_spuser");
            });

            modelBuilder.Entity<SpUser>(entity =>
            {
                entity.HasComment("供货商信息");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Address).HasComment("供货商地址");

                entity.Property(e => e.Crtime).HasComment("创建时间");

                entity.Property(e => e.Name).HasComment("供货商名称");

                entity.Property(e => e.State).HasComment("状态 0正常 1禁用");
            });

            modelBuilder.Entity<TCart>(entity =>
            {
                entity.HasKey(e => new { e.Userid, e.Productid })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("购物车");

                entity.Property(e => e.Userid).HasComment("用户id");

                entity.Property(e => e.Productid).HasComment("商品id");

                entity.Property(e => e.Count).HasComment("商品数量");

                entity.Property(e => e.Crtime).HasComment("创建时间");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.TCart)
                    .HasForeignKey(d => d.Productid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fkproductid");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.TCart)
                    .HasForeignKey(d => d.Userid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fkuseridtt");
            });

            modelBuilder.Entity<TCategory>(entity =>
            {
                entity.HasComment("商品分类");

                entity.Property(e => e.Id).HasComment("商品分类id");

                entity.Property(e => e.Crtime).HasComment("创建时间");

                entity.Property(e => e.Name).HasComment("商品分类名称");

                entity.Property(e => e.State).HasComment("状态0正常 1禁用");
            });

            modelBuilder.Entity<TComment>(entity =>
            {
                entity.HasComment("评论");

                entity.Property(e => e.Id).HasComment("id");

                entity.Property(e => e.Crtime).HasComment("创建时间");

                entity.Property(e => e.Msg).HasComment("内容");

                entity.Property(e => e.Orderid).HasComment("订单编号");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.TComment)
                    .HasForeignKey(d => d.Orderid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_orderid");
            });

            modelBuilder.Entity<TCompany>(entity =>
            {
                entity.HasComment("公司");

                entity.Property(e => e.Id).HasComment("公司id");

                entity.Property(e => e.Address).HasComment("公司地址");

                entity.Property(e => e.Code).HasComment("唯一编码");

                entity.Property(e => e.Crtime).HasComment("创建时间");

                entity.Property(e => e.Name).HasComment("公司名字");
            });

            modelBuilder.Entity<TCoupon>(entity =>
            {
                entity.HasComment("优惠卷信息");

                entity.Property(e => e.Id).HasComment("优惠券id");

                entity.Property(e => e.Crtime)
                    .HasDefaultValueSql("CURRENT_TIMESTAMP")
                    .HasComment("优惠卷创建时间");

                entity.Property(e => e.EndTime).HasComment("使用截止日期");

                entity.Property(e => e.Money)
                    .HasPrecision(16, 2)
                    .HasComment("优惠金额");

                entity.Property(e => e.Name).HasComment("优惠卷名称");

                entity.Property(e => e.StartTime).HasComment("使用开始日期");
            });

            modelBuilder.Entity<TFeedback>(entity =>
            {
                entity.HasComment("用户反馈");

                entity.Property(e => e.Id).HasComment("id");

                entity.Property(e => e.Crtime).HasComment("创建时间");

                entity.Property(e => e.Msg).HasComment("内容");

                entity.Property(e => e.Replay).HasComment("回复内容");

                entity.Property(e => e.ReplayTime).HasComment("回复时间");

                entity.Property(e => e.Userid).HasComment("用户id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.TFeedback)
                    .HasForeignKey(d => d.Userid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_userid");
            });

            modelBuilder.Entity<TMessage>(entity =>
            {
                entity.HasComment("消息中心");

                entity.Property(e => e.Id).HasComment("id");

                entity.Property(e => e.Crtime).HasComment("创建时间");

                entity.Property(e => e.Isread).HasComment("是否已读(0未读 1已读)");

                entity.Property(e => e.Message).HasComment("消息内容");

                entity.Property(e => e.Userid).HasComment("用户id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.TMessage)
                    .HasForeignKey(d => d.Userid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fkuserid");
            });

            modelBuilder.Entity<TOrder>(entity =>
            {
                entity.HasComment("订单信息");

                entity.Property(e => e.Id).HasComment("订单编号");

                entity.Property(e => e.CouponMoney)
                    .HasPrecision(32, 2)
                    .HasComment("优惠金额");

                entity.Property(e => e.Crdate).HasComment("创建日期");

                entity.Property(e => e.Crtime).HasComment("创建时间");

                entity.Property(e => e.Money)
                    .HasPrecision(32, 2)
                    .HasComment("订单金额");

                entity.Property(e => e.PayMoney)
                    .HasPrecision(32, 2)
                    .HasComment("实际支付金额");

                entity.Property(e => e.Phone).HasComment("手机号");

                entity.Property(e => e.State).HasComment("状态（0待支付，1已支付，2已完成，9已取消，10已删除）");

                entity.Property(e => e.Userid).HasComment("用户id");
            });

            modelBuilder.Entity<TOrderCallback>(entity =>
            {
                entity.HasKey(e => e.Orderid)
                    .HasName("PRIMARY");

                entity.HasComment("微信支付回调");

                entity.Property(e => e.Orderid).HasComment("订单编号");

                entity.Property(e => e.Crtime).HasComment("创建时间");

                entity.Property(e => e.State).HasComment("状态");

                entity.Property(e => e.WxOrderid).HasComment("微信支付订单号");

                entity.HasOne(d => d.Order)
                    .WithOne(p => p.TOrderCallback)
                    .HasForeignKey<TOrderCallback>(d => d.Orderid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fkorderid");
            });

            modelBuilder.Entity<TOrderCoupon>(entity =>
            {
                entity.HasKey(e => new { e.Orderid, e.Couponid })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("订单中使用的优惠卷");

                entity.Property(e => e.Orderid).HasComment("订单编号");

                entity.Property(e => e.Couponid).HasComment("优惠卷id");

                entity.Property(e => e.Count).HasComment("数量");

                entity.Property(e => e.CouponName).HasComment("优惠券名称");

                entity.Property(e => e.Money)
                    .HasPrecision(16, 2)
                    .HasComment("总金额");

                entity.Property(e => e.Price)
                    .HasPrecision(10)
                    .HasComment("优惠券面额");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.TOrderCoupon)
                    .HasForeignKey(d => d.Orderid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fkorder");
            });

            modelBuilder.Entity<TOrderProduct>(entity =>
            {
                entity.HasKey(e => new { e.Orderid, e.Productid })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("订单中的商品信息");

                entity.Property(e => e.Orderid).HasComment("订单编号");

                entity.Property(e => e.Productid).HasComment("商品id");

                entity.Property(e => e.Count).HasComment("数量");

                entity.Property(e => e.Img).HasComment("商品图片");

                entity.Property(e => e.Money)
                    .HasPrecision(16, 2)
                    .HasComment("金额");

                entity.Property(e => e.Price)
                    .HasPrecision(16, 2)
                    .HasComment("单价");

                entity.Property(e => e.ProductName).HasComment("商品名称");

                entity.Property(e => e.Type).HasComment("类别 0普通 1早餐 2午餐 3晚餐");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.TOrderProduct)
                    .HasForeignKey(d => d.Orderid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fkorders");
            });

            modelBuilder.Entity<TPay>(entity =>
            {
                entity.HasComment("支付信息");

                entity.Property(e => e.Id).HasComment("id");

                entity.Property(e => e.Crtime).HasComment("创建时间");

                entity.Property(e => e.Orderid).HasComment("订单编号");

                entity.Property(e => e.Status).HasComment("状态");

                entity.Property(e => e.WxOrderid).HasComment("微信订单号");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.TPay)
                    .HasForeignKey(d => d.Orderid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_orderid2");
            });

            modelBuilder.Entity<TProduct>(entity =>
            {
                entity.HasComment("商品");

                entity.Property(e => e.Id).HasComment("商品id");

                entity.Property(e => e.Category).HasComment("商品分类");

                entity.Property(e => e.Crtime).HasComment("创建时间");

                entity.Property(e => e.Img).HasComment("商品图片");

                entity.Property(e => e.Name).HasComment("商品名称");

                entity.Property(e => e.Price)
                    .HasPrecision(16, 2)
                    .HasComment("价格");

                entity.Property(e => e.Sales).HasComment("销量");

                entity.HasOne(d => d.CategoryNavigation)
                    .WithMany(p => p.TProduct)
                    .HasForeignKey(d => d.Category)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("t_product_ibfk_1");
            });

            modelBuilder.Entity<TProductCompany>(entity =>
            {
                entity.HasKey(e => new { e.Productid, e.Companyid, e.StartDate })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                entity.HasComment("商品定向公司展示");

                entity.Property(e => e.Productid).HasComment("商品id");

                entity.Property(e => e.Companyid).HasComment("公司id");

                entity.Property(e => e.StartDate).HasComment("起始日期");

                entity.Property(e => e.EndDate).HasComment("结束日期");
            });

            modelBuilder.Entity<TUser>(entity =>
            {
                entity.HasComment("用户");

                entity.Property(e => e.Id).HasComment("用户id");

                entity.Property(e => e.Code).HasComment("唯一编码");

                entity.Property(e => e.Companyid).HasComment("公司id");

                entity.Property(e => e.Crtime).HasComment("创建时间");

                entity.Property(e => e.Gender).HasComment("性别 0女 1男");

                entity.Property(e => e.Headimg).HasComment("头像图片");

                entity.Property(e => e.Nick).HasComment("昵称");

                entity.Property(e => e.Phone).HasComment("手机号");

                entity.Property(e => e.State).HasComment("状态 0正常 1禁用");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.TUser)
                    .HasForeignKey(d => d.Companyid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_company");
            });

            modelBuilder.Entity<TUserCoupon>(entity =>
            {
                entity.HasKey(e => new { e.Userid, e.Couponid })
                    .HasName("PRIMARY")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                entity.HasComment("用户的优惠卷");

                entity.Property(e => e.Userid).HasComment("用户id");

                entity.Property(e => e.Couponid).HasComment("优惠卷id");

                entity.Property(e => e.Count).HasComment("数量");

                entity.Property(e => e.Crtime).HasComment("创建时间");

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.TUserCoupon)
                    .HasForeignKey(d => d.Couponid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_coupon");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.TUserCoupon)
                    .HasForeignKey(d => d.Userid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_user");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}